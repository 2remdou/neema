<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Livraison;

/**
 * LivraisonRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LivraisonRepository extends \Doctrine\ORM\EntityRepository
{
    private function getMainDql(){
        $dql  = "SELECT l,c,li
                  from AppBundle:Livraison l
                  JOIN l.commande c
                  JOIN l.livreur li";
        return $dql;
    }
    private function getMainQueryBuilder(){
        return $this->createQueryBuilder('lvs')
            ->addSelect(['l','c','e','llv','qlv','clv','r','ir','q','commune','PARTIAL client.{id,telephone,nom,prenom}'])
            ->leftJoin('lvs.livreur','l')
            ->leftJoin('lvs.commande','c')
            ->leftJoin('c.etatCommande','e')
            ->leftJoin('c.lieuLivraison','llv')
            ->leftJoin('llv.quartier','qlv')
            ->leftJoin('qlv.commune','clv')
            ->leftJoin('c.restaurant','r')
            ->leftJoin('r.imageRestaurants','ir')
            ->leftJoin('r.quartier','q')
            ->leftJoin('q.commune','commune')
            ->leftJoin('c.user','client');
    }
    public function findAll(){

        $dql = $this->getMainDql();
        $query = $this->getEntityManager()
            ->createQuery($dql);
        return $query->getArrayResult();
    }

    /**
     * affiche l'historique des livraisons effectuées par un livreur
     * @param $idLivreur
     * @return array
     */
    public function findHistorique($idLivreur){
        $query = $this->getMainQueryBuilder()
            ->where('l.id=:idLivreur')
            ->andWhere('lvs.finished=true')
            ->setParameter('idLivreur',$idLivreur)
            ->orderBy('lvs.dateFinLivraison','DESC')
            ->getQuery();

        $livraisons = $query->getArrayResult();

        return $livraisons;
    }

    /**
     * Recherche la livraison courante du livreur dont l'id est fournit en parametre.
     * Une livraison est dites courante si le restaurant a marqué la commande terminée(commande.giveLivreur=false) et
     * le livreur n'a pas encore livré(livraison.finished=false)
     * @param $idLivreur
     * @return array
     */
    public function findLivraisonEncours($idLivreur){
        $query = $this->getMainQueryBuilder()
            ->addSelect(['q','commune','dc','p'])
            ->leftJoin('c.detailCommandes','dc')
            ->leftJoin('dc.plat','p')
            ->where('l.id=:idLivreur')
            ->andWhere('lvs.finished=false')
            ->setParameter('idLivreur',$idLivreur)
            ->orderBy('c.dateCommande','DESC')
            ->getQuery();

        $livraisons = $query->getArrayResult();

        return count($livraisons)!==0?$livraisons[0]:null;
    }

    /**
     * Trouver une livraison sans livreur
     * @return Livraison
     */
    public function findWithoutLivreur(){
        $qb = $this->createQueryBuilder('lvs');
        $livraisons = $qb
            ->leftJoin('lvs.commande','c')
            ->where($qb->expr()->isNull('lvs.livreur'))
            ->andWhere('c.aLivrer=true')
//            ->where($this->createQueryBuilder('lvs')->expr()->isNull('livraison.livreur'))
            ->orderBy('c.dateCommande','ASC')
            ->getQuery()
            ->getResult();

        return count($livraisons)!==0?$livraisons[0]:null;

    }

    public function findById($id){
        $query = $this->getMainQueryBuilder()
            ->addSelect(['q','commune','dc','p'])
            ->leftJoin('c.detailCommandes','dc')
            ->leftJoin('dc.plat','p')
            ->where('lvs.id=:id')
            ->setParameter('id',$id)
            ->getQuery();

        $livraisons = $query->getArrayResult();

        return count($livraisons)!==0?$livraisons[0]:null;

    }


}
