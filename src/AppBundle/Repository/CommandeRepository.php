<?php

namespace AppBundle\Repository;
use Doctrine\ORM\AbstractQuery;
use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * CommandeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommandeRepository extends \Doctrine\ORM\EntityRepository
{
    use UtilForRepository;

    private function minQueryBuilder(){
        $queryBuilder = $this->createQueryBuilder('c');
        return $queryBuilder;
    }
    private function mainQueryBuilder(){

        $queryBuilder = $this->minQueryBuilder()
            ->addSelect(['l','lr','r','ir','d','p','ip','e','PARTIAL u.{id,username,nom,prenom}'])
            ->leftJoin('c.livraison','l')
            ->leftJoin('l.livreur','lr')
            ->leftJoin('c.restaurant','r')
            ->leftJoin('r.imageRestaurants','ir')
            ->leftJoin('c.detailCommandes','d')
            ->leftJoin('d.plat','p')
            ->leftJoin('p.imagePlat','ip')
            ->leftJoin('c.etatCommande','e')
            ->leftJoin('c.user','u');

        return $queryBuilder;
    }
    public function findAll(){

       return $this->minQueryBuilder()
           ->getQuery()
           ->getArrayResult();
    }

    public function getDureeRestant($idCommande,$tempsEcoule,$majorationTimeLivraison=0){

//        $dql = "SELECT sum(CASE WHEN p.dureePreparation<0 THEN 0 ELSE p.dureePreparation)+c.durationLivraison+600
        $dql = "SELECT sum(CASE WHEN p.dureePreparation-:tempsEcoule<=0 THEN 0 ELSE p.dureePreparation-:tempsEcoule END)
                FROM AppBundle:Commande c
                LEFT JOIN c.detailCommandes dc
                JOIN dc.plat p
                WHERE c.id=:idCommande
                AND dc.finished=false";

        $duree= $this->getEntityManager()
            ->createQuery($dql)
            ->setParameters(array('idCommande'=>$idCommande,'tempsEcoule'=>$tempsEcoule))
            ->getSingleScalarResult();

        return $duree===null?0:$duree;

    }

    public function findByTypeDelivered($isDelivered=false,$idRestaurant=''){

        return $this->mainQueryBuilder()
            ->where('r.id LIKE :idRestaurant')
            ->andWhere('c.isDelivered=:isDelivered')
            ->setParameters(array(
                'idRestaurant'=>$idRestaurant,
                'isDelivered'=>$isDelivered))
            ->orderBy('c.dateCommande','DESC')
            ->getQuery()
            ->getArrayResult();
    }

    public function findByUser($idUser){

        $commandes = $this->mainQueryBuilder()
//            ->leftJoin('c.user','u')
            ->where('u.id LIKE :idUser')
            ->setParameter('idUser',$idUser)
            ->orderBy('c.dateCommande','DESC')
            ->getQuery()
            ->getArrayResult();
        return $commandes;
    }

    public function findById($id){

        $commande = $this->mainQueryBuilder()
            ->where('c.id = :id')
            ->setParameter('id',$id)
            ->getQuery()
            ->getArrayResult();
        return count($commande)===1?$commande[0]:null;

    }

}
